From dev-bounces@openvswitch.org Fri Apr 16 01:12:32 2010
Received: from FTLPMAILMX02.citrite.net (10.9.154.224) by
 LONPMAILMX01.citrite.net (10.30.224.162) with Microsoft SMTP Server (TLS)
 id 8.1.393.1; Fri, 16 Apr 2010 01:12:32 +0100
Received: from SMTP02.CITRIX.COM (10.9.154.239) by FTLPMAILMX02.citrite.net
 (10.9.154.224) with Microsoft SMTP Server id 8.1.393.1; Thu, 15 Apr 2010
 20:12:31 -0400
Received: from vps.nicira.com ([66.7.219.28])  by SMTP02.CITRIX.COM with
 ESMTP/TLS/DHE-RSA-AES256-SHA; 15 Apr 2010 20:12:31 -0400
Received: from localhost ([127.0.0.1]:52673 helo=vps.nicira.com)	by
 vps.nicira.com with esmtp (Exim 4.69)	(envelope-from
 <dev-bounces@openvswitch.org>)	id 1O2ZAB-0002yv-JI; Thu, 15 Apr 2010
 20:12:03 -0400
Received: from 173-164-153-21-sfba.hfc.comcastbusiness.net
 ([173.164.153.21]:2727 helo=leadville.nicira.com)	by vps.nicira.com with
 esmtps (TLSv1:AES256-SHA:256) (Exim 4.69)	(envelope-from <blp@nicira.com>)
 id 1O2ZA8-0002wr-Iy	for dev@openvswitch.org; Thu, 15 Apr 2010 20:12:00 -0400
Received: from hardrock.nicira.com ([172.16.0.20])	by leadville.nicira.com
 with esmtp (Exim 4.67)	(envelope-from <blp@nicira.com>)	id
 1O2ZA3-0007f0-CF; Thu, 15 Apr 2010 17:11:55 -0700
Received: from blp by hardrock.nicira.com with local (Exim 4.67)
 (envelope-from <blp@hardrock.nicira.com>)	id 1O2ZAE-0006DK-Dp; Thu, 15 Apr
 2010 17:12:06 -0700
From: Ben Pfaff <blp@nicira.com>
To: "dev@openvswitch.org" <dev@openvswitch.org>
CC: Ben Pfaff <blp@nicira.com>
Sender: "dev-bounces@openvswitch.org" <dev-bounces@openvswitch.org>
Date: Fri, 16 Apr 2010 01:11:58 +0100
Subject: [ovs-dev] [PATCH 3/4] bridge: Factor admissibility check out of
 process_flow().
Thread-Topic: [ovs-dev] [PATCH 3/4] bridge: Factor admissibility check out
 of	process_flow().
Thread-Index: Acrc+YLb+vxTDR8/TsiawL1de8wCBQ==
Message-ID: <1271376719-23848-3-git-send-email-blp@nicira.com>
References: <1271376719-23848-1-git-send-email-blp@nicira.com>
List-Help: <mailto:dev-request@openvswitch.org?subject=help>
List-Subscribe:
 <http://openvswitch.org/mailman/listinfo/dev_openvswitch.org>,
 <mailto:dev-request@openvswitch.org?subject=subscribe>
List-Unsubscribe:
 <http://openvswitch.org/mailman/options/dev_openvswitch.org>,
 <mailto:dev-request@openvswitch.org?subject=unsubscribe>
In-Reply-To: <1271376719-23848-1-git-send-email-blp@nicira.com>
Accept-Language: en-GB, en-US
Content-Language: en-US
X-MS-Exchange-Organization-AuthAs: Anonymous
X-MS-Exchange-Organization-AuthSource: FTLPMAILMX02.citrite.net
X-MS-Has-Attach: 
X-Auto-Response-Suppress: All
X-MS-TNEF-Correlator: 
x-sbrs: 5.3
x-mesageid: 92502211
x-ironport-server: ftlpip02.citrite.net
x-remote-ip: 66.7.219.28
x-policy: $ACCEPTED
x-ironport-anti-spam-filtered: true
x-ironport-anti-spam-result:
 AqABAC9Ix0tCB9scmWdsb2JhbACbaxUBAQEBAQgLCgcRIr5QhQ4Egys
x-ironport-av: E=Sophos;i="4.52,215,1270440000";   
 d="scan'208";a="92502211"
x-antiabuse: Sender Address Domain - openvswitch.org
x-source: 
x-source-args: 
x-source-dir: 
list-id: <dev_openvswitch.org.openvswitch.org>
errors-to: dev-bounces@openvswitch.org
list-post: <mailto:dev@openvswitch.org>
list-archive: <http://openvswitch.org/pipermail/dev_openvswitch.org>
x-beenthere: dev@openvswitch.org
x-mailman-version: 2.1.12.cp3
Content-Type: text/plain; charset="us-ascii"
MIME-Version: 1.0
X-Evolution-Source: imap://ianca@lonpmailmx01.citrite.net/
Content-Transfer-Encoding: 8bit

The next commit will need to make the same tests as the first part of
process_flow(), so this commit breaks that out into a new function
is_admissible().

Should have no externally visible effect.
---
 vswitchd/bridge.c |   80 +++++++++++++++++++++++++++++++++++++++--------------
 1 files changed, 59 insertions(+), 21 deletions(-)

diff --git a/vswitchd/bridge.c b/vswitchd/bridge.c
index 187115c..d33944a 100644
--- a/vswitchd/bridge.c
+++ b/vswitchd/bridge.c
@@ -2171,25 +2171,39 @@ is_bcast_arp_reply(const flow_t *flow)
             && eth_addr_is_broadcast(flow->dl_dst));
 }
 
-/* If the composed actions may be applied to any packet in the given 'flow',
- * returns true.  Otherwise, the actions should only be applied to 'packet', or
- * not at all, if 'packet' was NULL. */
+/* Determines whether packets in 'flow' within 'br' should be forwarded or
+ * dropped.  Returns true if they may be forwarded, false if they should be
+ * dropped.
+ *
+ * If 'have_packet' is true, it indicates that the caller is processing a
+ * received packet.  If 'have_packet' is false, then the caller is just
+ * revalidating an existing flow because configuration has changed.  Either
+ * way, 'have_packet' only affects logging (there is no point in logging errors
+ * during revalidation).
+ *
+ * Sets '*in_portp' to the input port.  This will be a null pointer if
+ * flow->in_port does not designate a known input port (in which case
+ * is_admissible() returns false).
+ *
+ * When returning true, sets '*vlanp' to the effective VLAN of the input
+ * packet, as returned by flow_get_vlan().
+ *
+ * May also add tags to '*tags', although the current implementation only does
+ * so in one special case.
+ */
 static bool
-process_flow(struct bridge *br, const flow_t *flow,
-             const struct ofpbuf *packet, struct odp_actions *actions,
-             tag_type *tags, uint16_t *nf_output_iface)
+is_admissible(struct bridge *br, const flow_t *flow, bool have_packet,
+              tag_type *tags, int *vlanp, struct port **in_portp)
 {
     struct iface *in_iface;
     struct port *in_port;
-    struct port *out_port = NULL; /* By default, drop the packet/flow. */
     int vlan;
-    int out_port_idx;
 
     /* Find the interface and port structure for the received packet. */
     in_iface = iface_from_dp_ifidx(br, flow->in_port);
     if (!in_iface) {
         /* No interface?  Something fishy... */
-        if (packet != NULL) {
+        if (have_packet) {
             /* Odd.  A few possible reasons here:
              *
              * - We deleted an interface but there are still a few packets
@@ -2207,29 +2221,29 @@ process_flow(struct bridge *br, const flow_t *flow,
                          "interface %"PRIu16, br->name, flow->in_port); 
         }
 
-        /* Return without adding any actions, to drop packets on this flow. */
-        return true;
+        *in_portp = NULL;
+        return false;
     }
-    in_port = in_iface->port;
-    vlan = flow_get_vlan(br, flow, in_port, !!packet);
+    *in_portp = in_port = in_iface->port;
+    *vlanp = vlan = flow_get_vlan(br, flow, in_port, have_packet);
     if (vlan < 0) {
-        goto done;
+        return false;
     }
 
     /* Drop frames for reserved multicast addresses. */
     if (eth_addr_is_reserved(flow->dl_dst)) {
-        goto done;
+        return false;
     }
 
     /* Drop frames on ports reserved for mirroring. */
     if (in_port->is_mirror_output_port) {
-        if (packet) {
+        if (have_packet) {
             static struct vlog_rate_limit rl = VLOG_RATE_LIMIT_INIT(1, 5);
             VLOG_WARN_RL(&rl, "bridge %s: dropping packet received on port "
                          "%s, which is reserved exclusively for mirroring",
                          br->name, in_port->name);
         }
-        goto done;
+        return false;
     }
 
     /* Packets received on bonds need special attention to avoid duplicates. */
@@ -2240,7 +2254,7 @@ process_flow(struct bridge *br, const flow_t *flow,
             *tags |= in_port->active_iface_tag;
             if (in_port->active_iface != in_iface->port_ifidx) {
                 /* Drop all multicast packets on inactive slaves. */
-                goto done;
+                return false;
             }
         }
 
@@ -2251,10 +2265,32 @@ process_flow(struct bridge *br, const flow_t *flow,
         src_idx = mac_learning_lookup(br->ml, flow->dl_src, vlan);
         if (src_idx != -1 && src_idx != in_port->port_idx &&
             !is_bcast_arp_reply(flow)) {
-                goto done;
+                return false;
         }
     }
 
+    return true;
+}
+
+/* If the composed actions may be applied to any packet in the given 'flow',
+ * returns true.  Otherwise, the actions should only be applied to 'packet', or
+ * not at all, if 'packet' was NULL. */
+static bool
+process_flow(struct bridge *br, const flow_t *flow,
+             const struct ofpbuf *packet, struct odp_actions *actions,
+             tag_type *tags, uint16_t *nf_output_iface)
+{
+    struct port *in_port;
+    struct port *out_port;
+    int vlan;
+    int out_port_idx;
+
+    /* Check whether we should drop packets in this flow. */
+    if (!is_admissible(br, flow, packet != NULL, tags, &vlan, &in_port)) {
+        out_port = NULL;
+        goto done;
+    }
+
     /* Learn source MAC (but don't try to learn from revalidation). */
     if (packet) {
         update_learning_table(br, flow, vlan, in_port);
@@ -2281,8 +2317,10 @@ process_flow(struct bridge *br, const flow_t *flow,
     }
 
 done:
-    compose_actions(br, flow, vlan, in_port, out_port, tags, actions,
-                    nf_output_iface);
+    if (in_port) {
+        compose_actions(br, flow, vlan, in_port, out_port, tags, actions,
+                        nf_output_iface);
+    }
 
     return true;
 }
-- 
1.6.6.1


_______________________________________________
dev mailing list
dev@openvswitch.org
http://openvswitch.org/mailman/listinfo/dev_openvswitch.org

